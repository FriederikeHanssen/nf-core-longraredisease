/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run nf-core/nanoraredx -profile test,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

process {
    resourceLimits = [       
        cpus: 1,
        memory: '2.GB'   
    ]
    
}

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'
    
    //Test data paths
    bam_dir      = "/home/nmahfel/nf-training/test_data/bam_pass" // path to directory with BAM files         // path to your BAM file
    fasta_file   = "/home/nmahfel/nf-training/test_data/genome/genome_22.fasta"
    fai_file     = "/home/nmahfel/nf-training/test_data/genome/genome_22.fasta.fai" 
    
    //Assets data paths
    sniffles_tandem_file  = "/home/nmahfel/nf-training/nf-core-nanoraredx/assets/data/sniffles_no_alt_analysis_set.trf.bed"    // path to tandem repeats BED file
    bed_file      = null // targeted regions BED file (optional, can be null); used in mosdepth and deepvariant 
    spectre_metadata = "/home/nmahfel/nf-training/nf-core-nanoraredx/assets/data/spectre_metadata.mdr"  
    spectre_blacklist = "/home/nmahfel/nf-training/nf-core-nanoraredx/assets/data/spectre_blacklist.bed"
    
    // SV filtering parameters
    filter_sv_calls = true
    min_read_support = 'auto' // Estimates average coverage (from your depth file).
    //Looks up a recommended minimum read support from a lookup table in teh script get_filter_calls_command.py
    min_read_support_limit = 3 //Fall back value for minimum read support if the lookup table does not have a value for your coverage.
    //For coverage up to 19: min support = 3
    chromosome_codes = [
    'chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10',
    'chr11','chr12','chr13','chr14','chr15','chr16','chr17','chr18','chr19','chr20',
    'chr21','chr22','chrX','chrY','chrMT']


    // SURVIVOR merge parameters
    merge_sv_calls  = true                  //Boolean
    max_distance_breakpoints = 1000        // Max distance between breakpoints (bp)
    min_supporting_callers = 2           // Minimum callers supporting an SV
    account_for_type = 1                   // Account for SV type (1=yes, 0=no)
    account_for_sv_strands = 1             // Account for SV strands (1=yes, 0=no)
    estimate_distanced_by_sv_size = 1      // Estimate distance by SV size (1=yes, 0=no)
    min_sv_size = 30  

    // Filtering parameters
    chrom_sizes = null //there is a file available with chrom sizes in assets/data
    
    // CLAIR3 configuration
    clair3_model = "r1041_e82_400bps_sup_v500" //Need to add a list of models in assets folder
    clair3_platform = "ont"

    // DeepVariant parameters
    use_deepvariant   = true


    // Test data for Spectre as can not be tested on subset of data. Otherwise the data above will be used or mosdepth output.
    spectre_fasta_file = "/home/nmahfel/nf-training/test_data/genome/genome.fa"
    spectre_mosdepth = "/home/nmahfel/nf-training/test_data/mosdepth/D22-68847.regions.bed.gz"
    spectre_snv_vcf = "/home/nmahfel/nf-training/test_data/merge_output.vcf" //clair3 snv 
    
    // QDNAseq bin size
    use_qdnaseq                = false
    genome_build               = 'hg38'
    qdnaseq_bin_size           = 1000
    method                     = 'cutoff'
    cutoff                     = 0.5
    cutoff_del                 = 0.5
    cutoff_loss                = 1.5
    cutoff_gain                = 2.5
    cellularity                = 1

    // Str bed file
    str_bed_file         = "/home/nmahfel/nf-training/nf-core-nanoraredx/assets/data/str.test.bed" // only for test as has to match geome chr22 and bam
    // In non test use str_repeats.bed



    // feature flags
    phase = true
    phase_with_sv = true
    phase_sv_caller = null // if the sv file not merged tehn choose which one to run with phasing; options are sniffles cutesv svim
    snv = true
    cnv = true
    str = true
    

    // Output options 
    vcf_output   = true                            
    snf_output   = true
    outdir                       = './results'
    
     

    // Input data
    // TODO nf-core: Specify the paths to your test data on nf-core/test-datasets
    // TODO nf-core: Give any required params for the test so that command line flags are not needed
    // input  = params.pipelines_testdata_base_path + 'viralrecon/samplesheet/samplesheet_test_illumina_amplicon.csv'// Genome references
    // genome = 'R64-1-1'
}

