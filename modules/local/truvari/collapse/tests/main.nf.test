nextflow_process {

    name "Test Process TRUVARI_COLLAPSE"
    script "../main.nf"
    process "TRUVARI_COLLAPSE"

    tag "modules"
    tag "modules_nfcore"
    tag "truvari"
    tag "truvari/collapse"

    test("without bed") {

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz.tbi', checkIfExists:true),
                    []
                ]
                input[1] = 1000      // refdist
                input[2] = 0.70      // pctsim
                input[3] = 0.70      // pctseq
                input[4] = false     // passonly
                input[5] = false     // dup_to_ins
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.merged_vcf[0][1]).vcf.summary,
                    path(process.out.collapsed_vcf[0][1]).vcf.summary,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }

    test("with bed") {

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz.tbi', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists:true)
                ]
                input[1] = 1000      // refdist
                input[2] = 0.70      // pctsim
                input[3] = 0.70      // pctseq
                input[4] = true      // passonly
                input[5] = false     // dup_to_ins
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.merged_vcf[0][1]).vcf.summary,
                    path(process.out.collapsed_vcf[0][1]).vcf.summary,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }

    test("with dup_to_ins flag") {

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz.tbi', checkIfExists:true),
                    []
                ]
                input[1] = 500       // refdist
                input[2] = 0.80      // pctsim
                input[3] = 0.80      // pctseq
                input[4] = false     // passonly
                input[5] = true      // dup_to_ins
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.merged_vcf[0][1]).vcf.summary,
                    path(process.out.collapsed_vcf[0][1]).vcf.summary,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }

    test("without bed - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/chr21/simulated_sv.vcf.gz.tbi', checkIfExists:true),
                    []
                ]
                input[1] = 1000      // refdist
                input[2] = 0.70      // pctsim
                input[3] = 0.70      // pctseq
                input[4] = false     // passonly
                input[5] = false     // dup_to_ins
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                    ).match()
                }
            )
        }
    }
}